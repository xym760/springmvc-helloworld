<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--
    需要进行Spring整合SpringMVC吗？
    还是否需要再加入Spring的IOC容器？
    是否需要在web.xml文件中配置启动Spring IOC容器的ContextLoaderListener ?

    1.需要：通常情况下，类似于数据源，事务，整合其他框架都是放在Spring的配置文件中（而不是放在SpringMVC的配置文件中）。
    实际上放入Spring配置文件对应的IOC容器中的还有Service和Dao.
    2.不需要：都放在SpringMVC的配置文件中。也可以分多个Spring的配置文件，然后使用import节点导入其他的配置文件
    -->

    <!--配置自动扫描的包-->
    <!--
    问题：若Spring的IOC容器和SpringMVC的IOC容器扫描的包有重合的部分，就会导致有的bean会被创建两次。
    解决：
    1.使Spring的IOC容器扫描的包跟SpringMVC的IOC容器扫描的包没有重合的部分。
    2.使用exclude-filter和include-filter子节点来规定只能扫描的注解
    -->
    <!--
    SpringMVC的IOC容器中的bean可以来引用Spring IOC容器中的bean。
    反之则不行。
    -->
    <context:component-scan base-package="com.nxist.springmvc"></context:component-scan>

    <!--配置视图解析器：如何把handler方法返回值解析为实际的物理视图-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--配置视图解析器BeanNameViewResolver：使用视图的名字来解析视图-->
    <!--通过order属性来定义视图解析器的优先级，order值越小优先级越高-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="100"></property>
    </bean>

    <!--配置国际化资源文件-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"></property>
    </bean>

    <!--配置SessionLocalResolver-->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>

    <!--配置LocaleChangeInterceptor-->
    <mvc:interceptors>
        <!--配置自定义的拦截器-->
        <bean class="com.nxist.springmvc.interceptors.FirstInterceptor"></bean>
        <!--可以配置拦截器（不）作用的路径-->
        <mvc:interceptor>
            <mvc:mapping path="/emps"/>
            <bean class="com.nxist.springmvc.interceptors.SecondInterceptor"></bean>
        </mvc:interceptor>
        <!--配置LocaleChangeInterceptor-->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
    </mvc:interceptors>

    <!--配置直接转发的页面-->
    <!--可以直接响应转发的页面，而无需再经过Handler的方法-->
    <mvc:view-controller path="/success" view-name="success"></mvc:view-controller>
    <!--<mvc:view-controller path="/i18n" view-name="i18n"></mvc:view-controller>-->
    <mvc:view-controller path="/i18n2" view-name="i18n2"></mvc:view-controller>

    <!--在实际开发中通常都需要配置mvc:annotation-driven标签-->
    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

    <!--
    <mvc:default-servlet-handler/> 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，
    它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，
    就将该请求交由 WEB 应用服务器默认的 Servlet 处理，如果不是静态资源的请求，才由 DispatcherServlet继续处理。
    一般 WEB 应用服务器默认的 Servlet 的名称都是 default。
    若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定。
    -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>

    <!--配置ConversionService-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="employeeConverter"></ref>
            </set>
        </property>
    </bean>

    <!--配置MultipartResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxUploadSize" value="1024000"></property>
    </bean>

    <!--配置SimpleMappingExceptionResolver来映射异常，配置当出现哪种异常的时候跳转到哪个页面-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="ex"></property>
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
            </props>
        </property>
    </bean>
</beans>